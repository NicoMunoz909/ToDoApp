(()=>{"use strict";var n={382:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),i=t.n(r),a=t(645),o=t.n(a)()(i());o.push([n.id,"* {\n    box-sizing: border-box;\n}\n.calendar-container {\n    border: 1px solid black;\n    width: 350px;\n    height: 300px;\n    margin: auto;\n    border-radius: 10px;\n    position: absolute;\n    justify-self: flex-end;\n    align-self: flex-start;\n    z-index: 800;\n    background-color: black;\n    top: 3em;\n}\n.calendar-header {\n    border-bottom: 1px solid black;\n    height: 50px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n.previous {\n    position: relative;\n    left: 10px;\n}\n\n.previous:hover {\n    cursor: pointer;\n}\n.next {\n    position: relative;\n    right: 10px;\n}\n.next:hover {\n    cursor: pointer;\n}\n.calendar-grid {\n    display: grid;\n    height: 250px;\n    width: 100%;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: repeat(7, 1fr);\n    text-align: center;\n}\n.grid-header {\n    grid-column: span 7;\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: 1fr;\n}\n.grid-body {\n    grid-column: span 7;\n    grid-row: span 7;\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: repeat(6, 1fr);\n}\n.grid-cell {\n    width: 60%;\n    border-radius: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: auto;\n}\n.grid-cell:hover {\n    cursor: pointer;\n    background-color: rgb(54, 52, 52);\n    transition: 0.4s;\n}","",{version:3,sources:["webpack://./src/calendar.css"],names:[],mappings:"AAAA;IACI,sBAAsB;AAC1B;AACA;IACI,uBAAuB;IACvB,YAAY;IACZ,aAAa;IACb,YAAY;IACZ,mBAAmB;IACnB,kBAAkB;IAClB,sBAAsB;IACtB,sBAAsB;IACtB,YAAY;IACZ,uBAAuB;IACvB,QAAQ;AACZ;AACA;IACI,8BAA8B;IAC9B,YAAY;IACZ,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;AACvB;AACA;IACI,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,eAAe;AACnB;AACA;IACI,kBAAkB;IAClB,WAAW;AACf;AACA;IACI,eAAe;AACnB;AACA;IACI,aAAa;IACb,aAAa;IACb,WAAW;IACX,qCAAqC;IACrC,kCAAkC;IAClC,kBAAkB;AACtB;AACA;IACI,mBAAmB;IACnB,aAAa;IACb,qCAAqC;IACrC,uBAAuB;AAC3B;AACA;IACI,mBAAmB;IACnB,gBAAgB;IAChB,aAAa;IACb,qCAAqC;IACrC,kCAAkC;AACtC;AACA;IACI,UAAU;IACV,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,YAAY;AAChB;AACA;IACI,eAAe;IACf,iCAAiC;IACjC,gBAAgB;AACpB",sourcesContent:["* {\n    box-sizing: border-box;\n}\n.calendar-container {\n    border: 1px solid black;\n    width: 350px;\n    height: 300px;\n    margin: auto;\n    border-radius: 10px;\n    position: absolute;\n    justify-self: flex-end;\n    align-self: flex-start;\n    z-index: 800;\n    background-color: black;\n    top: 3em;\n}\n.calendar-header {\n    border-bottom: 1px solid black;\n    height: 50px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n.previous {\n    position: relative;\n    left: 10px;\n}\n\n.previous:hover {\n    cursor: pointer;\n}\n.next {\n    position: relative;\n    right: 10px;\n}\n.next:hover {\n    cursor: pointer;\n}\n.calendar-grid {\n    display: grid;\n    height: 250px;\n    width: 100%;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: repeat(7, 1fr);\n    text-align: center;\n}\n.grid-header {\n    grid-column: span 7;\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: 1fr;\n}\n.grid-body {\n    grid-column: span 7;\n    grid-row: span 7;\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: repeat(6, 1fr);\n}\n.grid-cell {\n    width: 60%;\n    border-radius: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: auto;\n}\n.grid-cell:hover {\n    cursor: pointer;\n    background-color: rgb(54, 52, 52);\n    transition: 0.4s;\n}"],sourceRoot:""}]);const s=o},426:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),i=t.n(r),a=t(645),o=t.n(a)()(i());o.push([n.id,"* {\n  box-sizing: border-box;\n}\nbody {\n  margin: 0;\n  width: 100vw;\n  height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  background: rgb(47, 47, 47);\n  color: white;\n  font-family: Arial, Helvetica, sans-serif;\n  overflow: hidden;\n}\n\n.opaque {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  background-color: rgb(148, 143, 143);\n  z-index: 100;\n  display: none;\n  opacity: 0;\n}\n\n.sidebar {\n  grid-column: span 2;\n  border-right: solid rgb(34, 34, 34);\n  box-shadow: 1px 0px 5px rgb(77, 77, 77),\n              -4px 0px 9px -4px rgb(77, 77, 77) inset;\n  display: grid;\n  grid-template-columns: 100%;\n  grid-template-rows: repeat(auto-fill, 40px);\n  align-items: center;\n  justify-items: center;\n  padding-top: 3vh;\n}\n\nbutton {\n  background: rgb(47, 47, 47);\n  color: white;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n  -1px -1px 1px rgb(110, 109, 109) inset;\n  border: none;\n  border-radius: 20px;\n  padding: 1vh;\n  width: 60%;\n  text-align: left;\n}\n\nbutton:hover {\n  background-color: rgb(77, 75, 75);\n  cursor: pointer;\n}\n\n.separator1 {\n  width: 90%;\n  border-color: rgb(139, 137, 137);\n}\n\n.separator2 {\n  width: 100%;\n  border-color: rgb(139, 137, 137);\n  grid-column: 4/12;\n  height: fit-content;\n}\n\nh2 {\n  font-size: 2vw;\n}\n\nmain {\n  grid-column: 4/12;\n  height: 100%;\n  overflow-y: scroll;\n  padding-right: 1vw;\n}\n\nheader {\n  display: flex;\n  justify-content: space-between;\n}\n\n.task {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  grid-template-rows: 50px 120px;\n  align-items: center;\n  height: 50px;\n  margin: auto;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n              -1px -1px 1px rgb(110, 109, 109) inset;\n  border-radius: 20px;\n  overflow: hidden;\n  padding-left: 20px;\n  margin-bottom: 20px;\n} \n\n.task--checkbox__incomplete {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 30px;\n  width: 30px;\n  border-radius: 50%;\n  border: solid 2px rgb(95, 95, 95);\n  grid-column: span 1;\n  color: rgb(47, 47, 47);\n}\n\n.task--checkbox__incomplete:hover {\n  color: white;\n  transition: 0.3s;\n  cursor: pointer;\n}\n\n.task--checkbox__complete {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 30px;\n  width: 30px;\n  border-radius: 50%;\n  border: solid 2px rgb(95, 95, 95);\n  grid-column: span 1;\n  color: white;\n}\n\n.task--checkbox__complete:hover {\n  color: red;\n  transition: 0.3s;\n  cursor: pointer;\n}\n\n.task--expand-colapse{\n  grid-column: 11/12;\n}\n\n.fa-chevron-down, .fa-chevron-up {\n  font-size: 30px;\n}\n\n.fa-chevron-down:hover, .fa-chevron-up:hover {\n  cursor: pointer;\n}\n\n.task--title {\n  grid-column: span 3;\n  position: relative;\n}\n\n.task--project {\n  grid-column: span 3;\n}\n\n.task--text {\n  display: inline;\n  margin-left: 20px;\n}\n\n.task--date {\n  grid-column: span 3;\n}\n\n.task--priority-edit {\n  display: flex;\n  align-self: flex-start;\n  flex-direction: column;\n  position: relative;\n}\n\n.task--priority-menu {\n  position: absolute;\n  top: 25px;\n  left: 0;\n  width: 70%;\n}\n\n.priority--option {\n  font-size: 11px;\n  border-radius: 20px;\n  padding-left: 3px;\n  margin-bottom: 3px;\n}\n\n.priority--option:hover {\n  cursor: pointer;\n  transform: translateX(5px);\n}\n\n.hidden {\n  display: none;\n}\n\n.task--priority__very-high {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgba(230,20,20,1) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__high {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(226, 92, 92) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__normal {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(47, 47, 47) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__low {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(45, 230, 20) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__very-low {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(8, 80, 6) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task-description {\n  grid-column: span 7;\n  max-height: 100px;\n  overflow-y: scroll;\n  margin-bottom: 10px;\n  margin-right: 20px;\n  position: relative;\n}\n\n.task--button {\n  display: block;\n  position: initial;\n  align-self: flex-start;\n  width: fit-content;\n}\n\n.task--button:hover {\n  color: black;\n  transition: 0.2s;\n  cursor: pointer;\n}\n\n.task--edit {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n              -1px -1px 1px rgb(110, 109, 109) inset;\n  width: 90%;\n  height: 100%;\n}\n\n.buttons-container {\n  grid-column: 8/12;\n  grid-row: 2/3;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  width: 100%;\n  height: 100%;\n}\n\n.edit-buttons {\n  width: 90%;\n  height: 50%;\n  position: relative;\n  top: 20px;\n}\n\n#save-changes {\n  grid-column: 2/3;\n  grid-row: 2/3;\n}\n\n#cancel-changes {\n  grid-column: 3/4;\n  grid-row: 2/3;\n}\n\n.completed {\n  color: white;\n  background-color: rgb(83, 80, 80);\n}\n\n::-webkit-scrollbar, ::-webkit-scrollbar-corner {\n  background-color: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: rgb(255, 247, 247);\n  border-radius: 20px;\n}\n\n.create-task-form {\n  z-index: 200;\n  background-color: rgb(47, 47, 47);\n  position: absolute;\n  left: 25%;\n  top: 10%;\n  display: none;\n  opacity: 0;\n  overflow: visible;\n}\n\n.form--title {\n  width: 100%;\n  height: 60%;\n  margin: 0;\n  padding-left: 10px;\n}\n\n.form--project {\n  justify-self: center;\n}\n\n.form--date {\n  grid-column: 8/10;\n  display: flex;\n  align-items: center;\n}\n\n.form--description {\n  width: 100%;\n  height: 100%;\n  padding-left: 10px;\n}\n\n.form--description--container {\n  height: 100%;\n}\n\n#date-string {\n  position: relative;\n  left: 1em;\n}\n\n.form--priority {\n  display: flex;\n}\n\n.fa-times-circle {\n  grid-column: 12/13;\n  grid-row: 1/2;\n  justify-self: right;\n  align-self: flex-start;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n\n.fa-times-circle:hover {\n  color: red;\n  cursor: pointer;\n}\n\n.collapsed {\n  height: 50px;\n  transition: .4s ease-in;\n}\n\n.expanded {\n  height: 170px;\n  transition: .4s ease-out;\n}\n\n.select--small {\n  font-size: 12px;\n  margin-left: 10px;\n}\n\n.select--small:hover {\n  cursor: pointer;\n  color: black;\n}\n\n\n.form--accept {\n  grid-column: 12/13;\n  grid-row: 2/3;\n  width: 16px;\n  height: 16px;\n  align-self: flex-end;\n  justify-self: flex-end;\n  margin-bottom: 10px;\n  margin-right: 10px;\n  display: block;\n}\n\n.form--accept:hover {\n  cursor: pointer;\n  color: green;\n}\n\ninput {\n  background-color: rgb(47, 47, 47);\n  border-radius: 20px;\n  color: white;\n  border: none;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n              -1px -1px 1px rgb(110, 109, 109) inset;\n}\n\ninput:focus-visible {\n  outline: none;\n}\n\n.form--visible {\n  display: grid;\n  opacity: 1;\n  transition: opacity .4s ease-in;\n}\n\n.opaque--visible {\n  display: block;\n  opacity: .6;\n  transition: opacity .4s ease-in;\n}\n\n.projects-header {\n  display: flex;\n  align-items: center;\n}\n\n.round {\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n}\n\n::-webkit-calendar-picker-indicator {\n  filter: invert(1);\n}\n\n.hoverable:hover {\n  cursor: pointer;\n  color: black;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["* {\n  box-sizing: border-box;\n}\nbody {\n  margin: 0;\n  width: 100vw;\n  height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  background: rgb(47, 47, 47);\n  color: white;\n  font-family: Arial, Helvetica, sans-serif;\n  overflow: hidden;\n}\n\n.opaque {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  background-color: rgb(148, 143, 143);\n  z-index: 100;\n  display: none;\n  opacity: 0;\n}\n\n.sidebar {\n  grid-column: span 2;\n  border-right: solid rgb(34, 34, 34);\n  box-shadow: 1px 0px 5px rgb(77, 77, 77),\n              -4px 0px 9px -4px rgb(77, 77, 77) inset;\n  display: grid;\n  grid-template-columns: 100%;\n  grid-template-rows: repeat(auto-fill, 40px);\n  align-items: center;\n  justify-items: center;\n  padding-top: 3vh;\n}\n\nbutton {\n  background: rgb(47, 47, 47);\n  color: white;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n  -1px -1px 1px rgb(110, 109, 109) inset;\n  border: none;\n  border-radius: 20px;\n  padding: 1vh;\n  width: 60%;\n  text-align: left;\n}\n\nbutton:hover {\n  background-color: rgb(77, 75, 75);\n  cursor: pointer;\n}\n\n.separator1 {\n  width: 90%;\n  border-color: rgb(139, 137, 137);\n}\n\n.separator2 {\n  width: 100%;\n  border-color: rgb(139, 137, 137);\n  grid-column: 4/12;\n  height: fit-content;\n}\n\nh2 {\n  font-size: 2vw;\n}\n\nmain {\n  grid-column: 4/12;\n  height: 100%;\n  overflow-y: scroll;\n  padding-right: 1vw;\n}\n\nheader {\n  display: flex;\n  justify-content: space-between;\n}\n\n.task {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  grid-template-rows: 50px 120px;\n  align-items: center;\n  height: 50px;\n  margin: auto;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n              -1px -1px 1px rgb(110, 109, 109) inset;\n  border-radius: 20px;\n  overflow: hidden;\n  padding-left: 20px;\n  margin-bottom: 20px;\n} \n\n.task--checkbox__incomplete {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 30px;\n  width: 30px;\n  border-radius: 50%;\n  border: solid 2px rgb(95, 95, 95);\n  grid-column: span 1;\n  color: rgb(47, 47, 47);\n}\n\n.task--checkbox__incomplete:hover {\n  color: white;\n  transition: 0.3s;\n  cursor: pointer;\n}\n\n.task--checkbox__complete {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 30px;\n  width: 30px;\n  border-radius: 50%;\n  border: solid 2px rgb(95, 95, 95);\n  grid-column: span 1;\n  color: white;\n}\n\n.task--checkbox__complete:hover {\n  color: red;\n  transition: 0.3s;\n  cursor: pointer;\n}\n\n.task--expand-colapse{\n  grid-column: 11/12;\n}\n\n.fa-chevron-down, .fa-chevron-up {\n  font-size: 30px;\n}\n\n.fa-chevron-down:hover, .fa-chevron-up:hover {\n  cursor: pointer;\n}\n\n.task--title {\n  grid-column: span 3;\n  position: relative;\n}\n\n.task--project {\n  grid-column: span 3;\n}\n\n.task--text {\n  display: inline;\n  margin-left: 20px;\n}\n\n.task--date {\n  grid-column: span 3;\n}\n\n.task--priority-edit {\n  display: flex;\n  align-self: flex-start;\n  flex-direction: column;\n  position: relative;\n}\n\n.task--priority-menu {\n  position: absolute;\n  top: 25px;\n  left: 0;\n  width: 70%;\n}\n\n.priority--option {\n  font-size: 11px;\n  border-radius: 20px;\n  padding-left: 3px;\n  margin-bottom: 3px;\n}\n\n.priority--option:hover {\n  cursor: pointer;\n  transform: translateX(5px);\n}\n\n.hidden {\n  display: none;\n}\n\n.task--priority__very-high {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgba(230,20,20,1) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__high {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(226, 92, 92) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__normal {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(47, 47, 47) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__low {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(45, 230, 20) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__very-low {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(8, 80, 6) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task-description {\n  grid-column: span 7;\n  max-height: 100px;\n  overflow-y: scroll;\n  margin-bottom: 10px;\n  margin-right: 20px;\n  position: relative;\n}\n\n.task--button {\n  display: block;\n  position: initial;\n  align-self: flex-start;\n  width: fit-content;\n}\n\n.task--button:hover {\n  color: black;\n  transition: 0.2s;\n  cursor: pointer;\n}\n\n.task--edit {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n              -1px -1px 1px rgb(110, 109, 109) inset;\n  width: 90%;\n  height: 100%;\n}\n\n.buttons-container {\n  grid-column: 8/12;\n  grid-row: 2/3;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  width: 100%;\n  height: 100%;\n}\n\n.edit-buttons {\n  width: 90%;\n  height: 50%;\n  position: relative;\n  top: 20px;\n}\n\n#save-changes {\n  grid-column: 2/3;\n  grid-row: 2/3;\n}\n\n#cancel-changes {\n  grid-column: 3/4;\n  grid-row: 2/3;\n}\n\n.completed {\n  color: white;\n  background-color: rgb(83, 80, 80);\n}\n\n::-webkit-scrollbar, ::-webkit-scrollbar-corner {\n  background-color: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: rgb(255, 247, 247);\n  border-radius: 20px;\n}\n\n.create-task-form {\n  z-index: 200;\n  background-color: rgb(47, 47, 47);\n  position: absolute;\n  left: 25%;\n  top: 10%;\n  display: none;\n  opacity: 0;\n  overflow: visible;\n}\n\n.form--title {\n  width: 100%;\n  height: 60%;\n  margin: 0;\n  padding-left: 10px;\n}\n\n.form--project {\n  justify-self: center;\n}\n\n.form--date {\n  grid-column: 8/10;\n  display: flex;\n  align-items: center;\n}\n\n.form--description {\n  width: 100%;\n  height: 100%;\n  padding-left: 10px;\n}\n\n.form--description--container {\n  height: 100%;\n}\n\n#date-string {\n  position: relative;\n  left: 1em;\n}\n\n.form--priority {\n  display: flex;\n}\n\n.fa-times-circle {\n  grid-column: 12/13;\n  grid-row: 1/2;\n  justify-self: right;\n  align-self: flex-start;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n\n.fa-times-circle:hover {\n  color: red;\n  cursor: pointer;\n}\n\n.collapsed {\n  height: 50px;\n  transition: .4s ease-in;\n}\n\n.expanded {\n  height: 170px;\n  transition: .4s ease-out;\n}\n\n.select--small {\n  font-size: 12px;\n  margin-left: 10px;\n}\n\n.select--small:hover {\n  cursor: pointer;\n  color: black;\n}\n\n\n.form--accept {\n  grid-column: 12/13;\n  grid-row: 2/3;\n  width: 16px;\n  height: 16px;\n  align-self: flex-end;\n  justify-self: flex-end;\n  margin-bottom: 10px;\n  margin-right: 10px;\n  display: block;\n}\n\n.form--accept:hover {\n  cursor: pointer;\n  color: green;\n}\n\ninput {\n  background-color: rgb(47, 47, 47);\n  border-radius: 20px;\n  color: white;\n  border: none;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n              -1px -1px 1px rgb(110, 109, 109) inset;\n}\n\ninput:focus-visible {\n  outline: none;\n}\n\n.form--visible {\n  display: grid;\n  opacity: 1;\n  transition: opacity .4s ease-in;\n}\n\n.opaque--visible {\n  display: block;\n  opacity: .6;\n  transition: opacity .4s ease-in;\n}\n\n.projects-header {\n  display: flex;\n  align-items: center;\n}\n\n.round {\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n}\n\n::-webkit-calendar-picker-indicator {\n  filter: invert(1);\n}\n\n.hoverable:hover {\n  cursor: pointer;\n  color: black;\n}"],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var i={};if(r)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var s=0;s<n.length;s++){var d=[].concat(n[s]);r&&i[d[0]]||(t&&(d[2]?d[2]="".concat(t," and ").concat(d[2]):d[2]=t),e.push(d))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,i=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var r,i,a=[],o=!0,s=!1;try{for(t=t.call(n);!(o=(r=t.next()).done)&&(a.push(r.value),!e||a.length!==e);o=!0);}catch(n){s=!0,i=n}finally{try{o||null==t.return||t.return()}finally{if(s)throw i}}return a}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[1],o=i[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(d," */"),l=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[a].concat(l).concat([c]).join("\n")}return[a].join("\n")}},695:n=>{var e={};n.exports=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},o=[],s=0;s<n.length;s++){var d=n[s],c=r.base?d[0]+r.base:d[0],l=a[c]||0,A="".concat(c," ").concat(l);a[c]=l+1;var u=t(A),p={css:d[1],media:d[2],sourceMap:d[3]};-1!==u?(e[u].references++,e[u].updater(p)):e.push({identifier:A,updater:i(p,r),references:1}),o.push(A)}return o}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var a=r(n=n||[],i=i||{});return function(n){n=n||[];for(var o=0;o<a.length;o++){var s=t(a[o]);e[s].references--}for(var d=r(n,i),c=0;c<a.length;c++){var l=t(a[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=d}}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r=t.css,i=t.media,a=t.sourceMap;i?n.setAttribute("media",i):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}}},e={};function t(r){var i=e[r];if(void 0!==i)return i.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(379),e=t.n(n),r=t(795),i=t.n(r),a=t(695),o=t.n(a),s=t(216),d=t.n(s),c=t(426),l={styleTagTransform:function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}},setAttributes:function(n){var e=t.nc;e&&n.setAttribute("nonce",e)},insert:function(n){var e=o()("head");if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(n)}};l.domAPI=i(),l.insertStyleElement=d(),e()(c.Z,l),c.Z&&c.Z.locals&&c.Z.locals;const A=()=>{function n(){const n=this,e=n.querySelector("#expand-colapse-icon");n.classList.contains("collapsed")?(e.classList.add("fa-chevron-up"),e.classList.remove("fa-chevron-down"),n.classList.remove("collapsed"),n.classList.add("expanded")):(e.classList.add("fa-chevron-down"),e.classList.remove("fa-chevron-up"),n.classList.remove("expanded"),n.classList.add("collapsed"),n.querySelector("#priority-menu").classList.add("hidden"))}function e(){this.classList.toggle("hidden")}const t=t=>{const r=document.createElement("div");r.classList.add("task","collapsed"),r.id="task";const i=document.createElement("div");i.classList.add("task--checkbox__incomplete"),i.id="checkbox";const a=document.createElement("i");a.classList.add("fas","fa-check"),a.id="check-icon",i.appendChild(a),r.appendChild(i);const o=document.createElement("div");o.classList.add("task--title");const s=document.createElement("p");s.id="title",s.classList.add("task--text"),s.textContent=t.title;const d=document.createElement("input");d.type="text",d.id="title-edit",d.classList.add("task--title","task--edit","hidden"),o.appendChild(s),o.appendChild(d),r.appendChild(o);const c=document.createElement("div");c.classList.add("task--project");const l=document.createElement("i");l.classList.add("fas","fa-circle"),l.id="project";const A=document.createElement("p");A.classList.add("task--text"),A.textContent=t.project;const u=document.createElement("i");u.id="project-edit",u.classList.add("fas","fa-chevron-down","select--small","hidden"),c.appendChild(l),c.appendChild(A),c.appendChild(u),r.appendChild(c);const p=document.createElement("div");p.classList.add("task--date"),p.id="task-date";const h=document.createElement("i");h.classList.add("far","fa-calendar-alt"),h.id="date";const m=document.createElement("p");m.classList.add("task--text"),m.id="date-string",m.textContent=t.dateString;const g=document.createElement("i");g.id="date-edit",g.classList.add("fas","fa-chevron-down","select--small","hidden"),p.appendChild(h),p.appendChild(m),p.appendChild(g),r.appendChild(p);const f=document.createElement("div");f.classList.add("task--expand-colapse"),f.id="expand-colapse",f.addEventListener("click",n.bind(r));const C=document.createElement("i");C.classList.add("fas","fa-chevron-down","task--button"),C.id="expand-colapse-icon",f.appendChild(C),r.appendChild(f);const b=document.createElement("div");switch(t.priority){case"Very Low":b.classList.add("task--priority__very-low");break;case"Low":b.classList.add("task--priority__low");break;case"Normal":b.classList.add("task--priority__normal");break;case"High":b.classList.add("task--priority__high");break;case"Very High":b.classList.add("task--priority__very-high")}b.id="priority",r.appendChild(b);const E=document.createElement("div");E.classList.add("task-description");const y=document.createElement("p");y.id="description",y.textContent=t.description;const v=document.createElement("input");v.type="text",v.classList.add("task--edit","task--description","hidden"),v.id="description-edit",E.appendChild(y),E.appendChild(v),r.appendChild(E);const w=document.createElement("div");w.classList.add("task--priority-edit");const x=document.createElement("i");x.classList.add("fas","fa-flag","task--button");const k=document.createElement("div");k.classList.add("task--priority-menu","hidden"),k.id="priority-menu";const B=document.createElement("div");B.classList.add("priority--option"),B.id="priority-vlow",B.dataset.value="Very Low",B.style="background: linear-gradient(270deg, rgb(47, 47, 47) 15%, rgb(8, 80, 6) 100%)",B.innerHTML="VL";const L=document.createElement("div");L.classList.add("priority--option"),L.id="priority-low",L.dataset.value="Low",L.style="background: linear-gradient(270deg, rgb(47, 47, 47) 15%, rgb(45, 230, 20) 100%)",L.innerHTML="L";const T=document.createElement("div");T.classList.add("priority--option"),T.id="priority-normal",T.dataset.value="Normal",T.innerHTML="N";const S=document.createElement("div");S.classList.add("priority--option"),S.id="priority-high",S.dataset.value="High",S.style="background: linear-gradient(270deg, rgb(47, 47, 47) 15%, rgb(226, 92, 92) 100%)",S.innerHTML="H";const Y=document.createElement("div");Y.classList.add("priority--option"),Y.id="priority-vhigh",Y.dataset.value="Very High",Y.style="background: linear-gradient(270deg, rgb(47, 47, 47) 15%, rgba(230,20,20,1) 100%)",Y.innerHTML="VH",w.appendChild(x),k.appendChild(Y),k.appendChild(S),k.appendChild(T),k.appendChild(L),k.appendChild(B),w.appendChild(k),x.addEventListener("click",e.bind(k));const _=document.createElement("i");_.classList.add("fas","fa-pen","task--button"),_.id="edit";const M=document.createElement("i");M.classList.add("fas","fa-trash-alt","task--button"),M.id="delete";const q=document.createElement("button");q.innerHTML="Save",q.id="save-changes",q.classList.add("edit-buttons","hidden");const D=document.createElement("button");D.innerHTML="Cancel",D.id="cancel-changes",D.classList.add("edit-buttons","hidden");const I=document.createElement("div");return I.classList.add("buttons-container"),I.appendChild(w),I.appendChild(_),I.appendChild(M),I.appendChild(q),I.appendChild(D),r.appendChild(I),r};return{wipeContent:()=>{const n=document.getElementById("tasks-container");Array.from(n.childNodes).forEach((n=>{n.remove()}))},createTask:t,appendTask:n=>{document.getElementById("tasks-container").appendChild(n)},loadSidebar:()=>{const n=document.createElement("div");n.classList.add("sidebar"),n.id="sidebar";const e=document.createElement("button");e.type="button",e.id="inbox",e.textContent="Inbox",n.appendChild(e);const t=document.createElement("button");t.type="button",t.id="inbox",t.textContent="Today",n.appendChild(t);const r=document.createElement("button");r.type="button",r.id="inbox",r.textContent="Upcoming",n.appendChild(r);const i=document.createElement("button");i.type="button",i.id="inbox",i.textContent="Past",n.appendChild(i);const a=document.createElement("hr");a.classList.add("separator1"),n.appendChild(a);const o=document.createElement("div");o.classList.add("projects-header");const s=document.createElement("button");s.type="button",s.id="add-project";const d=document.createElement("i");d.classList.add("fas","fa-plus"),s.appendChild(d),o.appendChild(s);const c=document.createElement("h2");c.textContent="PROJECTS",o.appendChild(c),n.appendChild(o),document.body.appendChild(n)},loadMain:()=>{const n=document.createElement("main");n.id="main";const e=document.createElement("header");n.appendChild(e);const t=document.createElement("h1");t.textContent="INBOX",e.appendChild(t);const r=document.createElement("button");r.type="button",r.id="new-task";const i=document.createElement("i");i.classList.add("fas","fa-plus"),r.appendChild(i),e.appendChild(r);const a=document.createElement("hr");a.classList.add("separator2"),n.appendChild(a);const o=document.createElement("div");o.id="tasks-container",o.classList.add("tasks-container"),n.appendChild(o),document.body.appendChild(n)},loadTasks:n=>{n.forEach((n=>{const e=t(n);document.getElementById("tasks-container").appendChild(e)}))},checkUncheckTask:(n,e)=>{const t=n.querySelector("#checkbox");e?(n.classList.remove("completed"),t.classList.add("task--checkbox__incomplete"),t.classList.remove("task--checkbox__complete")):(n.classList.add("completed"),t.classList.remove("task--checkbox__incomplete"),t.classList.add("task--checkbox__complete"))},openTaskEdition:(n,e)=>{n.querySelector("#edit").style="color: black";const t=n.querySelector("#title-edit");t.classList.remove("hidden"),t.value=e.title;const r=n.querySelector("#description-edit");r.classList.remove("hidden"),r.value=e.description,n.querySelector("#project-edit").classList.remove("hidden"),n.querySelector("#date-edit").classList.remove("hidden"),n.querySelector("#save-changes").classList.remove("hidden"),n.querySelector("#cancel-changes").classList.remove("hidden")},closeTaskEdition:(n,e)=>{n.querySelector("#edit").style="",n.querySelector("#title-edit").classList.add("hidden"),n.querySelector("#description-edit").classList.add("hidden"),n.querySelector("#title").textContent=e.title,n.querySelector("#description").textContent=e.description,n.querySelector("#project-edit").classList.add("hidden"),n.querySelector("#date-edit").classList.add("hidden"),n.querySelector("#save-changes").classList.add("hidden"),n.querySelector("#cancel-changes").classList.add("hidden")},openCreateTaskForm:function(){let n=document.getElementById("create-task-form");n.querySelector("#date-string").textContent=this;let e=document.getElementById("opaque");n.classList.add("form--visible"),e.classList.add("opaque--visible")},closeCreateTaskForm:()=>{let n=document.getElementById("create-task-form"),e=document.getElementById("opaque");n.reset(),n.querySelector("#date-string").textContent="",n.classList.remove("form--visible"),e.classList.remove("opaque--visible")},deleteTask:n=>{document.getElementById("tasks-container").removeChild(n)}}};var u=t(382),p={styleTagTransform:function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}},setAttributes:function(n){var e=t.nc;e&&n.setAttribute("nonce",e)},insert:function(n){var e=o()("head");if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(n)}};function h(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function m(n){h(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function g(n){h(1,arguments);var e=m(n);return e.setDate(1),e.setHours(0,0,0,0),e}function f(n){h(1,arguments);var e=m(n),t=e.getDay();return t}function C(n){h(1,arguments);var e=m(n),t=e.getDate();return t}function b(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function E(n,e){h(1,arguments);var t=e||{},r=t.locale,i=r&&r.options&&r.options.weekStartsOn,a=null==i?0:b(i),o=null==t.weekStartsOn?a:b(t.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=C(n);if(isNaN(s))return s;var d=f(g(n)),c=0,l=1;if(s>(c=d>=o?o+7-d:o-d)){var A=s-c;l+=Math.ceil(A/7)}return l}function y(n,e){h(2,arguments);var t=m(n),r=b(e);return isNaN(r)?new Date(NaN):r?(t.setDate(t.getDate()+r),t):t}function v(n,e){h(2,arguments);var t=b(e);return y(n,-t)}function w(n){h(1,arguments);var e=m(n),t=e.getMonth();return t}function x(n,e){h(2,arguments);var t=m(n),r=b(e);if(isNaN(r))return new Date(NaN);if(!r)return t;var i=t.getDate(),a=new Date(t.getTime());a.setMonth(t.getMonth()+r+1,0);var o=a.getDate();return i>=o?a:(t.setFullYear(a.getFullYear(),a.getMonth(),i),t)}function k(n){h(1,arguments);var e=m(n);return!isNaN(e)}p.domAPI=i(),p.insertStyleElement=d(),e()(u.Z,p),u.Z&&u.Z.locals&&u.Z.locals;var B={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function L(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}var T,S={date:L({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:L({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:L({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},Y={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function _(n){return function(e,t){var r,i=t||{};if("formatting"===(i.context?String(i.context):"standalone")&&n.formattingValues){var a=n.defaultFormattingWidth||n.defaultWidth,o=i.width?String(i.width):a;r=n.formattingValues[o]||n.formattingValues[a]}else{var s=n.defaultWidth,d=i.width?String(i.width):n.defaultWidth;r=n.values[d]||n.values[s]}return r[n.argumentCallback?n.argumentCallback(e):e]}}function M(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,i=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=e.match(i);if(!a)return null;var o,s=a[0],d=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(d)?D(d,(function(n){return n.test(s)})):q(d,(function(n){return n.test(s)}));o=n.valueCallback?n.valueCallback(c):c,o=t.valueCallback?t.valueCallback(o):o;var l=e.slice(s.length);return{value:o,rest:l}}}function q(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function D(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}const I={code:"en-US",formatDistance:function(n,e,t){var r;return t=t||{},r="string"==typeof B[n]?B[n]:1===e?B[n].one:B[n].other.replace("{{count}}",e),t.addSuffix?t.comparison>0?"in "+r:r+" ago":r},formatLong:S,formatRelative:function(n,e,t,r){return Y[n]},localize:{ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:_({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:_({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return Number(n)-1}}),month:_({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:_({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:_({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(T={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(T.matchPattern);if(!t)return null;var r=t[0],i=n.match(T.parsePattern);if(!i)return null;var a=T.valueCallback?T.valueCallback(i[0]):i[0];a=e.valueCallback?e.valueCallback(a):a;var o=n.slice(r.length);return{value:a,rest:o}}),era:M({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:M({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:M({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:M({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:M({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function j(n,e){h(2,arguments);var t=m(n).getTime(),r=b(e);return new Date(t+r)}function U(n,e){h(2,arguments);var t=b(e);return j(n,-t)}function W(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const P=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return W("yy"===e?r%100:r,e.length)},N=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):W(t+1,2)},O=function(n,e){return W(n.getUTCDate(),e.length)},z=function(n,e){return W(n.getUTCHours()%12||12,e.length)},X=function(n,e){return W(n.getUTCHours(),e.length)},Z=function(n,e){return W(n.getUTCMinutes(),e.length)},H=function(n,e){return W(n.getUTCSeconds(),e.length)},F=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return W(Math.floor(r*Math.pow(10,t-3)),e.length)};var Q=864e5;function R(n){h(1,arguments);var e=1,t=m(n),r=t.getUTCDay(),i=(r<e?7:0)+r-e;return t.setUTCDate(t.getUTCDate()-i),t.setUTCHours(0,0,0,0),t}function $(n){h(1,arguments);var e=m(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var i=R(r),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var o=R(a);return e.getTime()>=i.getTime()?t+1:e.getTime()>=o.getTime()?t:t-1}function G(n){h(1,arguments);var e=$(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var r=R(t);return r}var V=6048e5;function J(n,e){h(1,arguments);var t=e||{},r=t.locale,i=r&&r.options&&r.options.weekStartsOn,a=null==i?0:b(i),o=null==t.weekStartsOn?a:b(t.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=m(n),d=s.getUTCDay(),c=(d<o?7:0)+d-o;return s.setUTCDate(s.getUTCDate()-c),s.setUTCHours(0,0,0,0),s}function K(n,e){h(1,arguments);var t=m(n,e),r=t.getUTCFullYear(),i=e||{},a=i.locale,o=a&&a.options&&a.options.firstWeekContainsDate,s=null==o?1:b(o),d=null==i.firstWeekContainsDate?s:b(i.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=new Date(0);c.setUTCFullYear(r+1,0,d),c.setUTCHours(0,0,0,0);var l=J(c,e),A=new Date(0);A.setUTCFullYear(r,0,d),A.setUTCHours(0,0,0,0);var u=J(A,e);return t.getTime()>=l.getTime()?r+1:t.getTime()>=u.getTime()?r:r-1}function nn(n,e){h(1,arguments);var t=e||{},r=t.locale,i=r&&r.options&&r.options.firstWeekContainsDate,a=null==i?1:b(i),o=null==t.firstWeekContainsDate?a:b(t.firstWeekContainsDate),s=K(n,e),d=new Date(0);d.setUTCFullYear(s,0,o),d.setUTCHours(0,0,0,0);var c=J(d,e);return c}var en=6048e5;function tn(n,e){var t=n>0?"-":"+",r=Math.abs(n),i=Math.floor(r/60),a=r%60;if(0===a)return t+String(i);var o=e||"";return t+String(i)+o+W(a,2)}function rn(n,e){return n%60==0?(n>0?"-":"+")+W(Math.abs(n)/60,2):an(n,e)}function an(n,e){var t=e||"",r=n>0?"-":"+",i=Math.abs(n);return r+W(Math.floor(i/60),2)+t+W(i%60,2)}const on={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});case"GGGG":default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),i=r>0?r:1-r;return t.ordinalNumber(i,{unit:"year"})}return P(n,e)},Y:function(n,e,t,r){var i=K(n,r),a=i>0?i:1-i;return"YY"===e?W(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):W(a,e.length)},R:function(n,e){return W($(n),e.length)},u:function(n,e){return W(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return W(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return W(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return N(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return W(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var i=function(n,e){h(1,arguments);var t=m(n),r=J(t,e).getTime()-nn(t,e).getTime();return Math.round(r/en)+1}(n,r);return"wo"===e?t.ordinalNumber(i,{unit:"week"}):W(i,e.length)},I:function(n,e,t){var r=function(n){h(1,arguments);var e=m(n),t=R(e).getTime()-G(e).getTime();return Math.round(t/V)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):W(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):O(n,e)},D:function(n,e,t){var r=function(n){h(1,arguments);var e=m(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),i=t-r;return Math.floor(i/Q)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):W(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});case"EEEE":default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var i=n.getUTCDay(),a=(i-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return W(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(i,{width:"short",context:"formatting"});case"eeee":default:return t.day(i,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var i=n.getUTCDay(),a=(i-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return W(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(i,{width:"narrow",context:"standalone"});case"cccccc":return t.day(i,{width:"short",context:"standalone"});case"cccc":default:return t.day(i,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),i=0===r?7:r;switch(e){case"i":return String(i);case"ii":return W(i,e.length);case"io":return t.ordinalNumber(i,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});case"iiii":default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,i=n.getUTCHours();switch(r=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,i=n.getUTCHours();switch(r=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return z(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):X(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):W(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):W(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):Z(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):H(n,e)},S:function(n,e){return F(n,e)},X:function(n,e,t,r){var i=(r._originalDate||n).getTimezoneOffset();if(0===i)return"Z";switch(e){case"X":return rn(i);case"XXXX":case"XX":return an(i);case"XXXXX":case"XXX":default:return an(i,":")}},x:function(n,e,t,r){var i=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return rn(i);case"xxxx":case"xx":return an(i);case"xxxxx":case"xxx":default:return an(i,":")}},O:function(n,e,t,r){var i=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+tn(i,":");case"OOOO":default:return"GMT"+an(i,":")}},z:function(n,e,t,r){var i=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+tn(i,":");case"zzzz":default:return"GMT"+an(i,":")}},t:function(n,e,t,r){var i=r._originalDate||n;return W(Math.floor(i.getTime()/1e3),e.length)},T:function(n,e,t,r){return W((r._originalDate||n).getTime(),e.length)}};function sn(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});case"PPPP":default:return e.date({width:"full"})}}function dn(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});case"pppp":default:return e.time({width:"full"})}}const cn={p:dn,P:function(n,e){var t,r=n.match(/(P+)(p+)?/),i=r[1],a=r[2];if(!a)return sn(n,e);switch(i){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;case"PPPP":default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",sn(i,e)).replace("{{time}}",dn(a,e))}};function ln(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var An=["D","DD"],un=["YY","YYYY"];function pn(n){return-1!==An.indexOf(n)}function hn(n){return-1!==un.indexOf(n)}function mn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var gn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,fn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Cn=/^'([^]*?)'?$/,bn=/''/g,En=/[a-zA-Z]/;function yn(n,e,t){h(2,arguments);var r=String(e),i=t||{},a=i.locale||I,o=a.options&&a.options.firstWeekContainsDate,s=null==o?1:b(o),d=null==i.firstWeekContainsDate?s:b(i.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=a.options&&a.options.weekStartsOn,l=null==c?0:b(c),A=null==i.weekStartsOn?l:b(i.weekStartsOn);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!a.localize)throw new RangeError("locale must contain localize property");if(!a.formatLong)throw new RangeError("locale must contain formatLong property");var u=m(n);if(!k(u))throw new RangeError("Invalid time value");var p=ln(u),g=U(u,p),f={firstWeekContainsDate:d,weekStartsOn:A,locale:a,_originalDate:u},C=r.match(fn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,cn[e])(n,a.formatLong,f):n})).join("").match(gn).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return vn(t);var o=on[r];if(o)return!i.useAdditionalWeekYearTokens&&hn(t)&&mn(t,e,n),!i.useAdditionalDayOfYearTokens&&pn(t)&&mn(t,e,n),o(g,t,a.localize,f);if(r.match(En))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("");return C}function vn(n){return n.match(Cn)[1].replace(bn,"'")}const wn=()=>{const n=new Date;let e=g(n);const t=f(e);let r=7*(E(e)-1)+t+1;const i=new Array(42);let a=new Date,o="";const s=(()=>{const n=document.createElement("div");n.classList.add("calendar-container");const e=document.createElement("div");e.classList.add("calendar-header");const t=document.createElement("span");t.classList.add("previous","fas","fa-chevron-left"),t.id="previous-month";const r=document.createElement("p");r.id="month";const i=document.createElement("span");i.classList.add("next","fas","fa-chevron-right"),i.id="next-month",e.appendChild(t),e.appendChild(r),e.appendChild(i),n.appendChild(e);const a=document.createElement("div");a.classList.add("calendar-grid");const o=document.createElement("div");o.classList.add("grid-header");const s=document.createElement("p");s.textContent="Sun";const d=document.createElement("p");d.textContent="Mon";const c=document.createElement("p");c.textContent="Tue";const l=document.createElement("p");l.textContent="Wed";const A=document.createElement("p");A.textContent="Thu";const h=document.createElement("p");h.textContent="Fri";const m=document.createElement("p");m.textContent="Sat",o.appendChild(s),o.appendChild(d),o.appendChild(c),o.appendChild(l),o.appendChild(A),o.appendChild(h),o.appendChild(m),a.appendChild(o);const g=document.createElement("div");g.classList.add("grid-body"),g.id="grid-body";for(let n=1;n<=42;n++){const e=document.createElement("p");e.dataset.pos=`${n}`,e.classList.add("grid-cell"),g.appendChild(e),e.addEventListener("click",k.bind(e))}return a.appendChild(g),n.appendChild(a),i.addEventListener("click",u),t.addEventListener("click",p),r.addEventListener("click",L),n})();function d(){r=7*(E(e)-1)+f(e)+1,i[r-1]=e;for(let n=r-2;n>=0;n--)i[n]=v(i[n+1],1);for(let n=r;n<i.length;n++)i[n]=y(i[n-1],1)}function c(){i.forEach((n=>{if(w(n)==w(e)){let e=7*(E(n)-1)+(f(n)+1);s.querySelector(`[data-pos="${e}"]`).textContent=`${C(n)}`}}))}function l(){for(let n=1;n<=42;n++)s.querySelector(`[data-pos="${n}"]`).textContent=""}function A(){const n=w(e),t=function(n){return h(1,arguments),m(n).getFullYear()}(e);let r="";switch(n){case 0:r=s.querySelector("#month"),r.textContent=`Jan ${t}`;break;case 1:r=s.querySelector("#month"),r.textContent=`Feb ${t}`;break;case 2:r=s.querySelector("#month"),r.textContent=`Mar ${t}`;break;case 3:r=s.querySelector("#month"),r.textContent=`Apr ${t}`;break;case 4:r=s.querySelector("#month"),r.textContent=`May ${t}`;break;case 5:r=s.querySelector("#month"),r.textContent=`Jun ${t}`;break;case 6:r=s.querySelector("#month"),r.textContent=`Jul ${t}`;break;case 7:r=s.querySelector("#month"),r.textContent=`Aug ${t}`;break;case 8:r=s.querySelector("#month"),r.textContent=`Sep ${t}`;break;case 9:r=s.querySelector("#month"),r.textContent=`Oct ${t}`;break;case 10:r=s.querySelector("#month"),r.textContent=`Nov ${t}`;break;case 11:r=s.querySelector("#month"),r.textContent=`Dic ${t}`}}function u(){e=x(e,1),d(),l(),A(),c()}function p(){e=function(n,e){h(2,arguments);var t=b(e);return x(n,-t)}(e,1),d(),l(),A(),c()}function k(){const n=this.textContent,e=s.querySelector("#month").textContent.split(" ")[0],t=s.querySelector("#month").textContent.split(" ")[1];let r=`${e} ${n}, ${t}`,i=new Date(t,["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dic"].indexOf(e),n);s.parentNode.querySelector("#date-string").textContent=r,s.remove(),B(r,i)}function B(n,e){o=n,a=e,console.log(a,o)}function L(){e=g(n),d(),l(),A(),c(),B(yn(n,"PP"),n)}return L(),d(),c(),A(),{element:s,goToToday:L,goToDate:function(){e=g(a),d(),l(),A(),c(),B(yn(a,"PP"),a)},getDate:function(){return a},getDateString:function(){return o},setDate:B}};(()=>{const n=A(),e=(()=>{const n={Inbox:[]};return{taskList:n,newTask:(e,t,r,i,a,o,s=!1)=>{const d={title:e,description:t,dateObject:r,dateString:i,priority:a,project:o,isCompleted:s};return n[o].push(d),d},deleteTask:e=>{const t=n[e.project].indexOf(e);n[e.project].splice(t,1)}}})(),t=wn();function r(){const e=this[0],t=this[1];n.checkUncheckTask(e,t.isCompleted),t.isCompleted?t.isCompleted=!1:t.isCompleted=!0}function i(){const n=this[0],e=this[1],t=n.querySelector("#priority");t.classList.remove("task--priority__very-high","task--priority__high","task--priority__normal","task--priority__low","task--priority__very-low"),t.classList.add("task--priority__very-low"),e.priority="Very Low"}function a(){const n=this[0],e=this[1],t=n.querySelector("#priority");t.classList.remove("task--priority__very-high","task--priority__high","task--priority__normal","task--priority__low","task--priority__very-low"),t.classList.add("task--priority__low"),e.priority="Low"}function o(){const n=this[0],e=this[1],t=n.querySelector("#priority");t.classList.remove("task--priority__very-high","task--priority__high","task--priority__normal","task--priority__low","task--priority__very-low"),t.classList.add("task--priority__normal"),e.priority="Normal"}function s(){const n=this[0],e=this[1],t=n.querySelector("#priority");t.classList.remove("task--priority__very-high","task--priority__high","task--priority__normal","task--priority__low","task--priority__very-low"),t.classList.add("task--priority__high"),e.priority="High"}function d(){const n=this[0],e=this[1],t=n.querySelector("#priority");t.classList.remove("task--priority__very-high","task--priority__high","task--priority__normal","task--priority__low","task--priority__very-low"),t.classList.add("task--priority__very-high"),e.priority="Very High"}function c(){const e=this[0],r=this[1];n.openTaskEdition(e,r),t.setDate(r.dateString,r.dateObject)}function l(){const e=this[0],t=this[1];n.closeTaskEdition(e,t)}function u(){const n=this[0];this[1],n.querySelector("#task-date").appendChild(t.element),t.goToDate()}function p(){const n=this[0],e=this[1],r=n.querySelector("#title-edit").value,i=n.querySelector("#description-edit").value;e.title=r,e.description=i,e.dateObject=t.getDate(),e.dateString=t.getDateString(),n.querySelector("#title").textContent=r,n.querySelector("#description").textContent=i,console.log(e)}function h(){const n=this[0],e=this[1];n.querySelector("#date-string").textContent=e.dateString}function m(){const t=this[0],r=this[1];n.deleteTask(t),e.deleteTask(r)}const g=(n,e)=>{const t=[n,e];n.querySelector("#checkbox").addEventListener("click",r.bind(t)),n.querySelector("#priority-vlow").addEventListener("click",i.bind(t)),n.querySelector("#priority-low").addEventListener("click",a.bind(t)),n.querySelector("#priority-normal").addEventListener("click",o.bind(t)),n.querySelector("#priority-high").addEventListener("click",s.bind(t)),n.querySelector("#priority-vhigh").addEventListener("click",d.bind(t)),n.querySelector("#edit").addEventListener("click",c.bind(t));const A=n.querySelector("#save-changes");A.addEventListener("click",p.bind(t)),A.addEventListener("click",l.bind(t));const g=n.querySelector("#cancel-changes");g.addEventListener("click",h.bind(t)),g.addEventListener("click",l.bind(t)),n.querySelector("#delete").addEventListener("click",m.bind(t)),n.querySelector("#date-edit").addEventListener("click",u.bind(t))};n.loadSidebar(),n.loadMain(),n.loadTasks(e.taskList.Inbox);const f=document.getElementById("new-task");f.addEventListener("click",n.openCreateTaskForm.bind(t.getDateString())),f.addEventListener("click",t.goToToday),document.getElementById("close-form").addEventListener("click",n.closeCreateTaskForm);const C=document.getElementById("accept-form");C.addEventListener("click",(function(){const r=document.getElementById("task-title").value,i=document.getElementById("task-description").value,a=document.getElementById("task-project").value,o=t.getDate(),s=t.getDateString(),d=document.getElementById("task-priority").value,c=e.newTask(r,i,o,s,d,a),l=n.createTask(c);g(l,c),n.appendTask(l)})),C.addEventListener("click",n.closeCreateTaskForm);const b=document.getElementById("create-task-form").querySelector("#task-date");b.addEventListener("click",function(){this.parentNode.appendChild(t.element),t.goToDate()}.bind(b))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,