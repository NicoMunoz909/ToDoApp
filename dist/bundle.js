(()=>{"use strict";var e={382:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(15),i=t.n(r),a=t(645),o=t.n(a)()(i());o.push([e.id,"* {\n    box-sizing: border-box;\n}\n.calendar-container {\n    border: 1px solid black;\n    width: 350px;\n    height: 300px;\n    margin: auto;\n    border-radius: 10px;\n    position: absolute;\n    justify-self: flex-end;\n    align-self: flex-start;\n    z-index: 800;\n    background-color: black;\n}\n.calendar-header {\n    border-bottom: 1px solid black;\n    height: 50px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n.previous {\n    position: relative;\n    left: 10px;\n}\n\n.previous:hover {\n    cursor: pointer;\n}\n.next {\n    position: relative;\n    right: 10px;\n}\n.next:hover {\n    cursor: pointer;\n}\n.calendar-grid {\n    display: grid;\n    height: 250px;\n    width: 100%;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: repeat(7, 1fr);\n    text-align: center;\n}\n.grid-header {\n    grid-column: span 7;\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: 1fr;\n}\n.grid-body {\n    grid-column: span 7;\n    grid-row: span 7;\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: repeat(6, 1fr);\n}\n.grid-cell {\n    width: 60%;\n    border-radius: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: auto;\n}\n.grid-cell:hover {\n    cursor: pointer;\n    background-color: rgb(54, 52, 52);\n    transition: 0.4s;\n}","",{version:3,sources:["webpack://./src/calendar.css"],names:[],mappings:"AAAA;IACI,sBAAsB;AAC1B;AACA;IACI,uBAAuB;IACvB,YAAY;IACZ,aAAa;IACb,YAAY;IACZ,mBAAmB;IACnB,kBAAkB;IAClB,sBAAsB;IACtB,sBAAsB;IACtB,YAAY;IACZ,uBAAuB;AAC3B;AACA;IACI,8BAA8B;IAC9B,YAAY;IACZ,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;AACvB;AACA;IACI,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,eAAe;AACnB;AACA;IACI,kBAAkB;IAClB,WAAW;AACf;AACA;IACI,eAAe;AACnB;AACA;IACI,aAAa;IACb,aAAa;IACb,WAAW;IACX,qCAAqC;IACrC,kCAAkC;IAClC,kBAAkB;AACtB;AACA;IACI,mBAAmB;IACnB,aAAa;IACb,qCAAqC;IACrC,uBAAuB;AAC3B;AACA;IACI,mBAAmB;IACnB,gBAAgB;IAChB,aAAa;IACb,qCAAqC;IACrC,kCAAkC;AACtC;AACA;IACI,UAAU;IACV,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,YAAY;AAChB;AACA;IACI,eAAe;IACf,iCAAiC;IACjC,gBAAgB;AACpB",sourcesContent:["* {\n    box-sizing: border-box;\n}\n.calendar-container {\n    border: 1px solid black;\n    width: 350px;\n    height: 300px;\n    margin: auto;\n    border-radius: 10px;\n    position: absolute;\n    justify-self: flex-end;\n    align-self: flex-start;\n    z-index: 800;\n    background-color: black;\n}\n.calendar-header {\n    border-bottom: 1px solid black;\n    height: 50px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n.previous {\n    position: relative;\n    left: 10px;\n}\n\n.previous:hover {\n    cursor: pointer;\n}\n.next {\n    position: relative;\n    right: 10px;\n}\n.next:hover {\n    cursor: pointer;\n}\n.calendar-grid {\n    display: grid;\n    height: 250px;\n    width: 100%;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: repeat(7, 1fr);\n    text-align: center;\n}\n.grid-header {\n    grid-column: span 7;\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: 1fr;\n}\n.grid-body {\n    grid-column: span 7;\n    grid-row: span 7;\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: repeat(6, 1fr);\n}\n.grid-cell {\n    width: 60%;\n    border-radius: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: auto;\n}\n.grid-cell:hover {\n    cursor: pointer;\n    background-color: rgb(54, 52, 52);\n    transition: 0.4s;\n}"],sourceRoot:""}]);const s=o},426:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(15),i=t.n(r),a=t(645),o=t.n(a)()(i());o.push([e.id,"* {\n  box-sizing: border-box;\n}\nbody {\n  margin: 0;\n  width: 100vw;\n  height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  background: rgb(47, 47, 47);\n  color: white;\n  font-family: Arial, Helvetica, sans-serif;\n  overflow: hidden;\n}\n\n.opaque {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  background-color: rgb(148, 143, 143);\n  z-index: 100;\n  display: none;\n  opacity: 0;\n}\n\n.sidebar {\n  grid-column: span 2;\n  border-right: solid rgb(34, 34, 34);\n  box-shadow: 1px 0px 5px rgb(77, 77, 77),\n              -4px 0px 9px -4px rgb(77, 77, 77) inset;\n  display: grid;\n  grid-template-columns: 100%;\n  grid-template-rows: repeat(auto-fill, 40px);\n  align-items: center;\n  justify-items: center;\n  padding-top: 3vh;\n}\n\nbutton {\n  background: rgb(47, 47, 47);\n  color: white;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n  -1px -1px 1px rgb(110, 109, 109) inset;\n  border: none;\n  border-radius: 20px;\n  padding: 1vh;\n  width: 60%;\n  text-align: left;\n}\n\nbutton:hover {\n  background-color: rgb(77, 75, 75);\n  cursor: pointer;\n}\n\n.separator1 {\n  width: 90%;\n  border-color: rgb(139, 137, 137);\n}\n\n.separator2 {\n  width: 100%;\n  border-color: rgb(139, 137, 137);\n  grid-column: 4/12;\n  height: fit-content;\n}\n\nh2 {\n  font-size: 2vw;\n}\n\nmain {\n  grid-column: 4/12;\n  height: 100%;\n  overflow-y: scroll;\n  padding-right: 1vw;\n}\n\nheader {\n  display: flex;\n  justify-content: space-between;\n}\n\n.task {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  grid-template-rows: 50px 120px;\n  align-items: center;\n  height: 50px;\n  margin: auto;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n              -1px -1px 1px rgb(110, 109, 109) inset;\n  border-radius: 20px;\n  overflow: hidden;\n  padding-left: 20px;\n  margin-bottom: 20px;\n} \n\n.task--checkbox__incomplete {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 30px;\n  width: 30px;\n  border-radius: 50%;\n  border: solid 2px rgb(95, 95, 95);\n  grid-column: span 1;\n  color: rgb(47, 47, 47);\n}\n\n.task--checkbox__incomplete:hover {\n  color: white;\n  transition: 0.3s;\n  cursor: pointer;\n}\n\n.task--checkbox__complete {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 30px;\n  width: 30px;\n  border-radius: 50%;\n  border: solid 2px rgb(95, 95, 95);\n  grid-column: span 1;\n  color: white;\n}\n\n.task--checkbox__complete:hover {\n  color: red;\n  transition: 0.3s;\n  cursor: pointer;\n}\n\n.task--expand-colapse{\n  grid-column: 11/12;\n}\n\n.fa-chevron-down, .fa-chevron-up {\n  font-size: 30px;\n}\n\n.fa-chevron-down:hover, .fa-chevron-up:hover {\n  cursor: pointer;\n}\n\n.task--title {\n  grid-column: span 3;\n  position: relative;\n}\n\n.task--project {\n  grid-column: span 3;\n}\n\n.task--text {\n  display: inline;\n  margin-left: 20px;\n}\n\n.task--date {\n  grid-column: span 3;\n}\n\n.task--priority-edit {\n  display: flex;\n  align-self: flex-start;\n  flex-direction: column;\n  position: relative;\n}\n\n.task--priority-menu {\n  position: absolute;\n  top: 25px;\n  left: 0;\n  width: 70%;\n}\n\n.priority--option {\n  font-size: 11px;\n  border-radius: 20px;\n  padding-left: 3px;\n  margin-bottom: 3px;\n}\n\n.priority--option:hover {\n  cursor: pointer;\n  transform: translateX(5px);\n}\n\n.hidden {\n  display: none;\n}\n\n.task--priority__very-high {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgba(230,20,20,1) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__high {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(226, 92, 92) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__normal {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(47, 47, 47) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__low {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(45, 230, 20) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__very-low {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(8, 80, 6) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task-description {\n  grid-column: span 7;\n  max-height: 100px;\n  overflow-y: scroll;\n  margin-bottom: 10px;\n  margin-right: 20px;\n  position: relative;\n}\n\n.task--button {\n  display: block;\n  position: initial;\n  align-self: flex-start;\n  width: fit-content;\n}\n\n.task--button:hover {\n  color: black;\n  transition: 0.2s;\n  cursor: pointer;\n}\n\n.task--edit {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n              -1px -1px 1px rgb(110, 109, 109) inset;\n  width: 90%;\n  height: 100%;\n}\n\n.buttons-container {\n  grid-column: 8/12;\n  grid-row: 2/3;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  width: 100%;\n  height: 100%;\n}\n\n.edit-buttons {\n  width: 90%;\n  height: 50%;\n  position: relative;\n  top: 20px;\n}\n\n#save-changes {\n  grid-column: 2/3;\n  grid-row: 2/3;\n}\n\n#cancel-changes {\n  grid-column: 3/4;\n  grid-row: 2/3;\n}\n\n.completed {\n  color: white;\n  background-color: rgb(83, 80, 80);\n}\n\n::-webkit-scrollbar, ::-webkit-scrollbar-corner {\n  background-color: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: rgb(255, 247, 247);\n  border-radius: 20px;\n}\n\n.create-task-form {\n  z-index: 200;\n  background-color: rgb(47, 47, 47);\n  position: absolute;\n  left: 25%;\n  top: 10%;\n  display: none;\n  opacity: 0;\n  overflow: visible;\n}\n\n.form--title {\n  width: 100%;\n  height: 60%;\n  margin: 0;\n  padding-left: 10px;\n}\n\n.form--project {\n  justify-self: center;\n}\n\n.form--date {\n  grid-column: 8/10;\n}\n\n#date-string {\n  display: inline;\n}\n\n.form--description {\n  width: 100%;\n  height: 100%;\n  padding-left: 10px;\n}\n\n.form--description--container {\n  height: 100%;\n}\n\n\n\n.form--priority {\n  display: flex;\n}\n\n.fa-times-circle {\n  grid-column: 12/13;\n  grid-row: 1/2;\n  justify-self: right;\n  align-self: flex-start;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n\n.fa-times-circle:hover {\n  color: red;\n  cursor: pointer;\n}\n\n.collapsed {\n  height: 50px;\n  transition: .4s ease-in;\n}\n\n.expanded {\n  height: 170px;\n  transition: .4s ease-out;\n}\n\n.select--small {\n  font-size: 12px;\n  margin-left: 10px;\n}\n\n.select--small:hover {\n  cursor: pointer;\n  color: black;\n}\n\n\n.form--accept {\n  grid-column: 12/13;\n  grid-row: 2/3;\n  width: 16px;\n  height: 16px;\n  align-self: flex-end;\n  justify-self: flex-end;\n  margin-bottom: 10px;\n  margin-right: 10px;\n  display: block;\n}\n\n.form--accept:hover {\n  cursor: pointer;\n  color: green;\n}\n\ninput {\n  background-color: rgb(47, 47, 47);\n  border-radius: 20px;\n  color: white;\n  border: none;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n              -1px -1px 1px rgb(110, 109, 109) inset;\n}\n\ninput:focus-visible {\n  outline: none;\n}\n\n.form--visible {\n  display: grid;\n  opacity: 1;\n  transition: opacity .4s ease-in;\n}\n\n.opaque--visible {\n  display: block;\n  opacity: .6;\n  transition: opacity .4s ease-in;\n}\n\n.projects-header {\n  display: flex;\n  align-items: center;\n}\n\n.round {\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n}\n\n::-webkit-calendar-picker-indicator {\n  filter: invert(1);\n}\n\n.hoverable:hover {\n  cursor: pointer;\n  color: black;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["* {\n  box-sizing: border-box;\n}\nbody {\n  margin: 0;\n  width: 100vw;\n  height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  background: rgb(47, 47, 47);\n  color: white;\n  font-family: Arial, Helvetica, sans-serif;\n  overflow: hidden;\n}\n\n.opaque {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  background-color: rgb(148, 143, 143);\n  z-index: 100;\n  display: none;\n  opacity: 0;\n}\n\n.sidebar {\n  grid-column: span 2;\n  border-right: solid rgb(34, 34, 34);\n  box-shadow: 1px 0px 5px rgb(77, 77, 77),\n              -4px 0px 9px -4px rgb(77, 77, 77) inset;\n  display: grid;\n  grid-template-columns: 100%;\n  grid-template-rows: repeat(auto-fill, 40px);\n  align-items: center;\n  justify-items: center;\n  padding-top: 3vh;\n}\n\nbutton {\n  background: rgb(47, 47, 47);\n  color: white;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n  -1px -1px 1px rgb(110, 109, 109) inset;\n  border: none;\n  border-radius: 20px;\n  padding: 1vh;\n  width: 60%;\n  text-align: left;\n}\n\nbutton:hover {\n  background-color: rgb(77, 75, 75);\n  cursor: pointer;\n}\n\n.separator1 {\n  width: 90%;\n  border-color: rgb(139, 137, 137);\n}\n\n.separator2 {\n  width: 100%;\n  border-color: rgb(139, 137, 137);\n  grid-column: 4/12;\n  height: fit-content;\n}\n\nh2 {\n  font-size: 2vw;\n}\n\nmain {\n  grid-column: 4/12;\n  height: 100%;\n  overflow-y: scroll;\n  padding-right: 1vw;\n}\n\nheader {\n  display: flex;\n  justify-content: space-between;\n}\n\n.task {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  grid-template-rows: 50px 120px;\n  align-items: center;\n  height: 50px;\n  margin: auto;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n              -1px -1px 1px rgb(110, 109, 109) inset;\n  border-radius: 20px;\n  overflow: hidden;\n  padding-left: 20px;\n  margin-bottom: 20px;\n} \n\n.task--checkbox__incomplete {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 30px;\n  width: 30px;\n  border-radius: 50%;\n  border: solid 2px rgb(95, 95, 95);\n  grid-column: span 1;\n  color: rgb(47, 47, 47);\n}\n\n.task--checkbox__incomplete:hover {\n  color: white;\n  transition: 0.3s;\n  cursor: pointer;\n}\n\n.task--checkbox__complete {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 30px;\n  width: 30px;\n  border-radius: 50%;\n  border: solid 2px rgb(95, 95, 95);\n  grid-column: span 1;\n  color: white;\n}\n\n.task--checkbox__complete:hover {\n  color: red;\n  transition: 0.3s;\n  cursor: pointer;\n}\n\n.task--expand-colapse{\n  grid-column: 11/12;\n}\n\n.fa-chevron-down, .fa-chevron-up {\n  font-size: 30px;\n}\n\n.fa-chevron-down:hover, .fa-chevron-up:hover {\n  cursor: pointer;\n}\n\n.task--title {\n  grid-column: span 3;\n  position: relative;\n}\n\n.task--project {\n  grid-column: span 3;\n}\n\n.task--text {\n  display: inline;\n  margin-left: 20px;\n}\n\n.task--date {\n  grid-column: span 3;\n}\n\n.task--priority-edit {\n  display: flex;\n  align-self: flex-start;\n  flex-direction: column;\n  position: relative;\n}\n\n.task--priority-menu {\n  position: absolute;\n  top: 25px;\n  left: 0;\n  width: 70%;\n}\n\n.priority--option {\n  font-size: 11px;\n  border-radius: 20px;\n  padding-left: 3px;\n  margin-bottom: 3px;\n}\n\n.priority--option:hover {\n  cursor: pointer;\n  transform: translateX(5px);\n}\n\n.hidden {\n  display: none;\n}\n\n.task--priority__very-high {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgba(230,20,20,1) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__high {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(226, 92, 92) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__normal {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(47, 47, 47) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__low {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(45, 230, 20) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task--priority__very-low {\n  height: 100%;\n  width: 100%;\n  background: linear-gradient(90deg, rgb(47, 47, 47) 0%, rgb(8, 80, 6) 100%);\n  grid-column: 12/14;\n  grid-row: 1/3;\n  z-index: -100;\n}\n\n.task-description {\n  grid-column: span 7;\n  max-height: 100px;\n  overflow-y: scroll;\n  margin-bottom: 10px;\n  margin-right: 20px;\n  position: relative;\n}\n\n.task--button {\n  display: block;\n  position: initial;\n  align-self: flex-start;\n  width: fit-content;\n}\n\n.task--button:hover {\n  color: black;\n  transition: 0.2s;\n  cursor: pointer;\n}\n\n.task--edit {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n              -1px -1px 1px rgb(110, 109, 109) inset;\n  width: 90%;\n  height: 100%;\n}\n\n.buttons-container {\n  grid-column: 8/12;\n  grid-row: 2/3;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  width: 100%;\n  height: 100%;\n}\n\n.edit-buttons {\n  width: 90%;\n  height: 50%;\n  position: relative;\n  top: 20px;\n}\n\n#save-changes {\n  grid-column: 2/3;\n  grid-row: 2/3;\n}\n\n#cancel-changes {\n  grid-column: 3/4;\n  grid-row: 2/3;\n}\n\n.completed {\n  color: white;\n  background-color: rgb(83, 80, 80);\n}\n\n::-webkit-scrollbar, ::-webkit-scrollbar-corner {\n  background-color: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: rgb(255, 247, 247);\n  border-radius: 20px;\n}\n\n.create-task-form {\n  z-index: 200;\n  background-color: rgb(47, 47, 47);\n  position: absolute;\n  left: 25%;\n  top: 10%;\n  display: none;\n  opacity: 0;\n  overflow: visible;\n}\n\n.form--title {\n  width: 100%;\n  height: 60%;\n  margin: 0;\n  padding-left: 10px;\n}\n\n.form--project {\n  justify-self: center;\n}\n\n.form--date {\n  grid-column: 8/10;\n}\n\n#date-string {\n  display: inline;\n}\n\n.form--description {\n  width: 100%;\n  height: 100%;\n  padding-left: 10px;\n}\n\n.form--description--container {\n  height: 100%;\n}\n\n\n\n.form--priority {\n  display: flex;\n}\n\n.fa-times-circle {\n  grid-column: 12/13;\n  grid-row: 1/2;\n  justify-self: right;\n  align-self: flex-start;\n  margin-right: 10px;\n  margin-top: 10px;\n}\n\n.fa-times-circle:hover {\n  color: red;\n  cursor: pointer;\n}\n\n.collapsed {\n  height: 50px;\n  transition: .4s ease-in;\n}\n\n.expanded {\n  height: 170px;\n  transition: .4s ease-out;\n}\n\n.select--small {\n  font-size: 12px;\n  margin-left: 10px;\n}\n\n.select--small:hover {\n  cursor: pointer;\n  color: black;\n}\n\n\n.form--accept {\n  grid-column: 12/13;\n  grid-row: 2/3;\n  width: 16px;\n  height: 16px;\n  align-self: flex-end;\n  justify-self: flex-end;\n  margin-bottom: 10px;\n  margin-right: 10px;\n  display: block;\n}\n\n.form--accept:hover {\n  cursor: pointer;\n  color: green;\n}\n\ninput {\n  background-color: rgb(47, 47, 47);\n  border-radius: 20px;\n  color: white;\n  border: none;\n  box-shadow: 1px 1px 2px rgb(32, 32, 32) inset,\n              -1px -1px 1px rgb(110, 109, 109) inset;\n}\n\ninput:focus-visible {\n  outline: none;\n}\n\n.form--visible {\n  display: grid;\n  opacity: 1;\n  transition: opacity .4s ease-in;\n}\n\n.opaque--visible {\n  display: block;\n  opacity: .6;\n  transition: opacity .4s ease-in;\n}\n\n.projects-header {\n  display: flex;\n  align-items: center;\n}\n\n.round {\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n}\n\n::-webkit-calendar-picker-indicator {\n  filter: invert(1);\n}\n\n.hoverable:hover {\n  cursor: pointer;\n  color: black;\n}"],sourceRoot:""}]);const s=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);r&&i[d[0]]||(t&&(d[2]?d[2]="".concat(t," and ").concat(d[2]):d[2]=t),n.push(d))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,i=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){var t=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=t){var r,i,a=[],o=!0,s=!1;try{for(t=t.call(e);!(o=(r=t.next()).done)&&(a.push(r.value),!n||a.length!==n);o=!0);}catch(e){s=!0,i=e}finally{try{o||null==t.return||t.return()}finally{if(s)throw i}}return a}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[1],o=i[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(d," */"),l=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[a].concat(l).concat([c]).join("\n")}return[a].join("\n")}},695:e=>{var n={};e.exports=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},o=[],s=0;s<e.length;s++){var d=e[s],c=r.base?d[0]+r.base:d[0],l=a[c]||0,A="".concat(c," ").concat(l);a[c]=l+1;var u=t(A),p={css:d[1],media:d[2],sourceMap:d[3]};-1!==u?(n[u].references++,n[u].updater(p)):n.push({identifier:A,updater:i(p,r),references:1}),o.push(A)}return o}function i(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t.update(e=n)}else t.remove()}}e.exports=function(e,i){var a=r(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<a.length;o++){var s=t(a[o]);n[s].references--}for(var d=r(e,i),c=0;c<a.length;c++){var l=t(a[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=d}}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n),n}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r=t.css,i=t.media,a=t.sourceMap;i?e.setAttribute("media",i):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(795),i=t.n(r),a=t(695),o=t.n(a),s=t(216),d=t.n(s),c=t(426),l={styleTagTransform:function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}},setAttributes:function(e){var n=t.nc;n&&e.setAttribute("nonce",n)},insert:function(e){var n=o()("head");if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(e)}};l.domAPI=i(),l.insertStyleElement=d(),n()(c.Z,l),c.Z&&c.Z.locals&&c.Z.locals;const A=()=>{function e(){const e=this,n=e.querySelector("#expand-colapse-icon");e.classList.contains("collapsed")?(n.classList.add("fa-chevron-up"),n.classList.remove("fa-chevron-down"),e.classList.remove("collapsed"),e.classList.add("expanded")):(n.classList.add("fa-chevron-down"),n.classList.remove("fa-chevron-up"),e.classList.remove("expanded"),e.classList.add("collapsed"),e.querySelector("#priority-menu").classList.add("hidden"))}function n(){this.classList.toggle("hidden")}const t=t=>{const r=document.createElement("div");r.classList.add("task","collapsed"),r.id="task";const i=document.createElement("div");i.classList.add("task--checkbox__incomplete"),i.id="checkbox";const a=document.createElement("i");a.classList.add("fas","fa-check"),a.id="check-icon",i.appendChild(a),r.appendChild(i);const o=document.createElement("div");o.classList.add("task--title");const s=document.createElement("p");s.id="title",s.classList.add("task--text"),s.textContent=t.title;const d=document.createElement("input");d.type="text",d.id="title-edit",d.classList.add("task--title","task--edit","hidden"),o.appendChild(s),o.appendChild(d),r.appendChild(o);const c=document.createElement("div");c.classList.add("task--project");const l=document.createElement("i");l.classList.add("fas","fa-circle"),l.id="project";const A=document.createElement("p");A.classList.add("task--text"),A.textContent=t.project;const u=document.createElement("i");u.id="project-edit",u.classList.add("fas","fa-chevron-down","select--small","hidden"),c.appendChild(l),c.appendChild(A),c.appendChild(u),r.appendChild(c);const p=document.createElement("div");p.classList.add("task--date"),p.id="task-date";const h=document.createElement("i");h.classList.add("far","fa-calendar-alt"),h.id="date";const m=document.createElement("p");m.classList.add("task--text"),m.id="date-string",m.textContent=t.dateString;const g=document.createElement("i");g.id="date-edit",g.classList.add("fas","fa-chevron-down","select--small","hidden"),p.appendChild(h),p.appendChild(m),p.appendChild(g),r.appendChild(p);const f=document.createElement("div");f.classList.add("task--expand-colapse"),f.id="expand-colapse",f.addEventListener("click",e.bind(r));const C=document.createElement("i");C.classList.add("fas","fa-chevron-down","task--button"),C.id="expand-colapse-icon",f.appendChild(C),r.appendChild(f);const b=document.createElement("div");switch(t.priority){case"Very Low":b.classList.add("task--priority__very-low");break;case"Low":b.classList.add("task--priority__low");break;case"Normal":b.classList.add("task--priority__normal");break;case"High":b.classList.add("task--priority__high");break;case"Very High":b.classList.add("task--priority__very-high")}b.id="priority",r.appendChild(b);const E=document.createElement("div");E.classList.add("task-description");const y=document.createElement("p");y.id="description",y.textContent=t.description;const v=document.createElement("input");v.type="text",v.classList.add("task--edit","task--description","hidden"),v.id="description-edit",E.appendChild(y),E.appendChild(v),r.appendChild(E);const w=document.createElement("div");w.classList.add("task--priority-edit");const x=document.createElement("i");x.classList.add("fas","fa-flag","task--button");const k=document.createElement("div");k.classList.add("task--priority-menu","hidden"),k.id="priority-menu";const B=document.createElement("div");B.classList.add("priority--option"),B.id="priority-vlow",B.dataset.value="Very Low",B.style="background: linear-gradient(270deg, rgb(47, 47, 47) 15%, rgb(8, 80, 6) 100%)",B.innerHTML="VL";const L=document.createElement("div");L.classList.add("priority--option"),L.id="priority-low",L.dataset.value="Low",L.style="background: linear-gradient(270deg, rgb(47, 47, 47) 15%, rgb(45, 230, 20) 100%)",L.innerHTML="L";const T=document.createElement("div");T.classList.add("priority--option"),T.id="priority-normal",T.dataset.value="Normal",T.innerHTML="N";const S=document.createElement("div");S.classList.add("priority--option"),S.id="priority-high",S.dataset.value="High",S.style="background: linear-gradient(270deg, rgb(47, 47, 47) 15%, rgb(226, 92, 92) 100%)",S.innerHTML="H";const Y=document.createElement("div");Y.classList.add("priority--option"),Y.id="priority-vhigh",Y.dataset.value="Very High",Y.style="background: linear-gradient(270deg, rgb(47, 47, 47) 15%, rgba(230,20,20,1) 100%)",Y.innerHTML="VH",w.appendChild(x),k.appendChild(Y),k.appendChild(S),k.appendChild(T),k.appendChild(L),k.appendChild(B),w.appendChild(k),x.addEventListener("click",n.bind(k));const _=document.createElement("i");_.classList.add("fas","fa-pen","task--button"),_.id="edit";const M=document.createElement("i");M.classList.add("fas","fa-trash-alt","task--button"),M.id="delete";const q=document.createElement("button");q.innerHTML="Save",q.id="save-changes",q.classList.add("edit-buttons","hidden");const D=document.createElement("button");D.innerHTML="Cancel",D.id="cancel-changes",D.classList.add("edit-buttons","hidden");const I=document.createElement("div");return I.classList.add("buttons-container"),I.appendChild(w),I.appendChild(_),I.appendChild(M),I.appendChild(q),I.appendChild(D),r.appendChild(I),r};return{wipeContent:()=>{const e=document.getElementById("tasks-container");Array.from(e.childNodes).forEach((e=>{e.remove()}))},createTask:t,appendTask:e=>{document.getElementById("tasks-container").appendChild(e)},loadSidebar:()=>{const e=document.createElement("div");e.classList.add("sidebar"),e.id="sidebar";const n=document.createElement("button");n.type="button",n.id="inbox",n.textContent="Inbox",e.appendChild(n);const t=document.createElement("button");t.type="button",t.id="inbox",t.textContent="Today",e.appendChild(t);const r=document.createElement("button");r.type="button",r.id="inbox",r.textContent="Upcoming",e.appendChild(r);const i=document.createElement("button");i.type="button",i.id="inbox",i.textContent="Past",e.appendChild(i);const a=document.createElement("hr");a.classList.add("separator1"),e.appendChild(a);const o=document.createElement("div");o.classList.add("projects-header");const s=document.createElement("button");s.type="button",s.id="add-project";const d=document.createElement("i");d.classList.add("fas","fa-plus"),s.appendChild(d),o.appendChild(s);const c=document.createElement("h2");c.textContent="PROJECTS",o.appendChild(c),e.appendChild(o),document.body.appendChild(e)},loadMain:()=>{const e=document.createElement("main");e.id="main";const n=document.createElement("header");e.appendChild(n);const t=document.createElement("h1");t.textContent="INBOX",n.appendChild(t);const r=document.createElement("button");r.type="button",r.id="new-task";const i=document.createElement("i");i.classList.add("fas","fa-plus"),r.appendChild(i),n.appendChild(r);const a=document.createElement("hr");a.classList.add("separator2"),e.appendChild(a);const o=document.createElement("div");o.id="tasks-container",o.classList.add("tasks-container"),e.appendChild(o),document.body.appendChild(e)},loadTasks:e=>{e.forEach((e=>{const n=t(e);document.getElementById("tasks-container").appendChild(n)}))},checkUncheckTask:(e,n)=>{const t=e.querySelector("#checkbox");n?(e.classList.remove("completed"),t.classList.add("task--checkbox__incomplete"),t.classList.remove("task--checkbox__complete")):(e.classList.add("completed"),t.classList.remove("task--checkbox__incomplete"),t.classList.add("task--checkbox__complete"))},openTaskEdition:(e,n)=>{e.querySelector("#edit").style="color: black";const t=e.querySelector("#title-edit");t.classList.remove("hidden"),t.value=n.title;const r=e.querySelector("#description-edit");r.classList.remove("hidden"),r.value=n.description,e.querySelector("#project-edit").classList.remove("hidden"),e.querySelector("#date-edit").classList.remove("hidden"),e.querySelector("#save-changes").classList.remove("hidden"),e.querySelector("#cancel-changes").classList.remove("hidden")},closeTaskEdition:(e,n)=>{e.querySelector("#edit").style="",e.querySelector("#title-edit").classList.add("hidden"),e.querySelector("#description-edit").classList.add("hidden"),e.querySelector("#title").textContent=n.title,e.querySelector("#description").textContent=n.description,e.querySelector("#project-edit").classList.add("hidden"),e.querySelector("#date-edit").classList.add("hidden"),e.querySelector("#save-changes").classList.add("hidden"),e.querySelector("#cancel-changes").classList.add("hidden")},openCreateTaskForm:function(){let e=document.getElementById("create-task-form");e.querySelector("#date-string").textContent=this;let n=document.getElementById("opaque");e.classList.add("form--visible"),n.classList.add("opaque--visible")},closeCreateTaskForm:()=>{let e=document.getElementById("create-task-form"),n=document.getElementById("opaque");e.reset(),e.querySelector("#date-string").textContent="",e.classList.remove("form--visible"),n.classList.remove("opaque--visible")},deleteTask:e=>{document.getElementById("tasks-container").removeChild(e)}}};var u=t(382),p={styleTagTransform:function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}},setAttributes:function(e){var n=t.nc;n&&e.setAttribute("nonce",n)},insert:function(e){var n=o()("head");if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(e)}};function h(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function m(e){h(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function g(e){h(1,arguments);var n=m(e);return n.setDate(1),n.setHours(0,0,0,0),n}function f(e){h(1,arguments);var n=m(e),t=n.getDay();return t}function C(e){h(1,arguments);var n=m(e),t=n.getDate();return t}function b(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function E(e,n){h(1,arguments);var t=n||{},r=t.locale,i=r&&r.options&&r.options.weekStartsOn,a=null==i?0:b(i),o=null==t.weekStartsOn?a:b(t.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=C(e);if(isNaN(s))return s;var d=f(g(e)),c=0,l=1;if(s>(c=d>=o?o+7-d:o-d)){var A=s-c;l+=Math.ceil(A/7)}return l}function y(e,n){h(2,arguments);var t=m(e),r=b(n);return isNaN(r)?new Date(NaN):r?(t.setDate(t.getDate()+r),t):t}function v(e,n){h(2,arguments);var t=b(n);return y(e,-t)}function w(e){h(1,arguments);var n=m(e),t=n.getMonth();return t}function x(e,n){h(2,arguments);var t=m(e),r=b(n);if(isNaN(r))return new Date(NaN);if(!r)return t;var i=t.getDate(),a=new Date(t.getTime());a.setMonth(t.getMonth()+r+1,0);var o=a.getDate();return i>=o?a:(t.setFullYear(a.getFullYear(),a.getMonth(),i),t)}function k(e){h(1,arguments);var n=m(e);return!isNaN(n)}p.domAPI=i(),p.insertStyleElement=d(),n()(u.Z,p),u.Z&&u.Z.locals&&u.Z.locals;var B={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function L(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,r=e.formats[t]||e.formats[e.defaultWidth];return r}}var T,S={date:L({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:L({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:L({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},Y={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function _(e){return function(n,t){var r,i=t||{};if("formatting"===(i.context?String(i.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,o=i.width?String(i.width):a;r=e.formattingValues[o]||e.formattingValues[a]}else{var s=e.defaultWidth,d=i.width?String(i.width):e.defaultWidth;r=e.values[d]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(n):n]}}function M(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,i=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],a=n.match(i);if(!a)return null;var o,s=a[0],d=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(d)?D(d,(function(e){return e.test(s)})):q(d,(function(e){return e.test(s)}));o=e.valueCallback?e.valueCallback(c):c,o=t.valueCallback?t.valueCallback(o):o;var l=n.slice(s.length);return{value:o,rest:l}}}function q(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function D(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}const I={code:"en-US",formatDistance:function(e,n,t){var r;return t=t||{},r="string"==typeof B[e]?B[e]:1===n?B[e].one:B[e].other.replace("{{count}}",n),t.addSuffix?t.comparison>0?"in "+r:r+" ago":r},formatLong:S,formatRelative:function(e,n,t,r){return Y[e]},localize:{ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:_({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:_({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:_({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:_({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:_({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(T={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(T.matchPattern);if(!t)return null;var r=t[0],i=e.match(T.parsePattern);if(!i)return null;var a=T.valueCallback?T.valueCallback(i[0]):i[0];a=n.valueCallback?n.valueCallback(a):a;var o=e.slice(r.length);return{value:a,rest:o}}),era:M({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:M({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:M({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:M({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:M({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function j(e,n){h(2,arguments);var t=m(e).getTime(),r=b(n);return new Date(t+r)}function U(e,n){h(2,arguments);var t=b(n);return j(e,-t)}function W(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r}const P=function(e,n){var t=e.getUTCFullYear(),r=t>0?t:1-t;return W("yy"===n?r%100:r,n.length)},N=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):W(t+1,2)},O=function(e,n){return W(e.getUTCDate(),n.length)},z=function(e,n){return W(e.getUTCHours()%12||12,n.length)},X=function(e,n){return W(e.getUTCHours(),n.length)},H=function(e,n){return W(e.getUTCMinutes(),n.length)},Z=function(e,n){return W(e.getUTCSeconds(),n.length)},F=function(e,n){var t=n.length,r=e.getUTCMilliseconds();return W(Math.floor(r*Math.pow(10,t-3)),n.length)};var Q=864e5;function R(e){h(1,arguments);var n=1,t=m(e),r=t.getUTCDay(),i=(r<n?7:0)+r-n;return t.setUTCDate(t.getUTCDate()-i),t.setUTCHours(0,0,0,0),t}function $(e){h(1,arguments);var n=m(e),t=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var i=R(r),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var o=R(a);return n.getTime()>=i.getTime()?t+1:n.getTime()>=o.getTime()?t:t-1}function G(e){h(1,arguments);var n=$(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var r=R(t);return r}var V=6048e5;function J(e,n){h(1,arguments);var t=n||{},r=t.locale,i=r&&r.options&&r.options.weekStartsOn,a=null==i?0:b(i),o=null==t.weekStartsOn?a:b(t.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=m(e),d=s.getUTCDay(),c=(d<o?7:0)+d-o;return s.setUTCDate(s.getUTCDate()-c),s.setUTCHours(0,0,0,0),s}function K(e,n){h(1,arguments);var t=m(e,n),r=t.getUTCFullYear(),i=n||{},a=i.locale,o=a&&a.options&&a.options.firstWeekContainsDate,s=null==o?1:b(o),d=null==i.firstWeekContainsDate?s:b(i.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=new Date(0);c.setUTCFullYear(r+1,0,d),c.setUTCHours(0,0,0,0);var l=J(c,n),A=new Date(0);A.setUTCFullYear(r,0,d),A.setUTCHours(0,0,0,0);var u=J(A,n);return t.getTime()>=l.getTime()?r+1:t.getTime()>=u.getTime()?r:r-1}function ee(e,n){h(1,arguments);var t=n||{},r=t.locale,i=r&&r.options&&r.options.firstWeekContainsDate,a=null==i?1:b(i),o=null==t.firstWeekContainsDate?a:b(t.firstWeekContainsDate),s=K(e,n),d=new Date(0);d.setUTCFullYear(s,0,o),d.setUTCHours(0,0,0,0);var c=J(d,n);return c}var ne=6048e5;function te(e,n){var t=e>0?"-":"+",r=Math.abs(e),i=Math.floor(r/60),a=r%60;if(0===a)return t+String(i);var o=n||"";return t+String(i)+o+W(a,2)}function re(e,n){return e%60==0?(e>0?"-":"+")+W(Math.abs(e)/60,2):ie(e,n)}function ie(e,n){var t=n||"",r=e>0?"-":"+",i=Math.abs(e);return r+W(Math.floor(i/60),2)+t+W(i%60,2)}const ae={G:function(e,n,t){var r=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});case"GGGG":default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var r=e.getUTCFullYear(),i=r>0?r:1-r;return t.ordinalNumber(i,{unit:"year"})}return P(e,n)},Y:function(e,n,t,r){var i=K(e,r),a=i>0?i:1-i;return"YY"===n?W(a%100,2):"Yo"===n?t.ordinalNumber(a,{unit:"year"}):W(a,n.length)},R:function(e,n){return W($(e),n.length)},u:function(e,n){return W(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return W(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return W(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){var r=e.getUTCMonth();switch(n){case"M":case"MM":return N(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){var r=e.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return W(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){var i=function(e,n){h(1,arguments);var t=m(e),r=J(t,n).getTime()-ee(t,n).getTime();return Math.round(r/ne)+1}(e,r);return"wo"===n?t.ordinalNumber(i,{unit:"week"}):W(i,n.length)},I:function(e,n,t){var r=function(e){h(1,arguments);var n=m(e),t=R(n).getTime()-G(n).getTime();return Math.round(t/V)+1}(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):W(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):O(e,n)},D:function(e,n,t){var r=function(e){h(1,arguments);var n=m(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=n.getTime(),i=t-r;return Math.floor(i/Q)+1}(e);return"Do"===n?t.ordinalNumber(r,{unit:"dayOfYear"}):W(r,n.length)},E:function(e,n,t){var r=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});case"EEEE":default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){var i=e.getUTCDay(),a=(i-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(a);case"ee":return W(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(i,{width:"short",context:"formatting"});case"eeee":default:return t.day(i,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){var i=e.getUTCDay(),a=(i-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(a);case"cc":return W(a,n.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(i,{width:"narrow",context:"standalone"});case"cccccc":return t.day(i,{width:"short",context:"standalone"});case"cccc":default:return t.day(i,{width:"wide",context:"standalone"})}},i:function(e,n,t){var r=e.getUTCDay(),i=0===r?7:r;switch(n){case"i":return String(i);case"ii":return W(i,n.length);case"io":return t.ordinalNumber(i,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});case"iiii":default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){var r,i=e.getUTCHours();switch(r=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,n,t){var r,i=e.getUTCHours();switch(r=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var r=e.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return z(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):X(e,n)},K:function(e,n,t){var r=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):W(r,n.length)},k:function(e,n,t){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):W(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):H(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):Z(e,n)},S:function(e,n){return F(e,n)},X:function(e,n,t,r){var i=(r._originalDate||e).getTimezoneOffset();if(0===i)return"Z";switch(n){case"X":return re(i);case"XXXX":case"XX":return ie(i);case"XXXXX":case"XXX":default:return ie(i,":")}},x:function(e,n,t,r){var i=(r._originalDate||e).getTimezoneOffset();switch(n){case"x":return re(i);case"xxxx":case"xx":return ie(i);case"xxxxx":case"xxx":default:return ie(i,":")}},O:function(e,n,t,r){var i=(r._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+te(i,":");case"OOOO":default:return"GMT"+ie(i,":")}},z:function(e,n,t,r){var i=(r._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+te(i,":");case"zzzz":default:return"GMT"+ie(i,":")}},t:function(e,n,t,r){var i=r._originalDate||e;return W(Math.floor(i.getTime()/1e3),n.length)},T:function(e,n,t,r){return W((r._originalDate||e).getTime(),n.length)}};function oe(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});case"PPPP":default:return n.date({width:"full"})}}function se(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});case"pppp":default:return n.time({width:"full"})}}const de={p:se,P:function(e,n){var t,r=e.match(/(P+)(p+)?/),i=r[1],a=r[2];if(!a)return oe(e,n);switch(i){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;case"PPPP":default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",oe(i,n)).replace("{{time}}",se(a,n))}};function ce(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var le=["D","DD"],Ae=["YY","YYYY"];function ue(e){return-1!==le.indexOf(e)}function pe(e){return-1!==Ae.indexOf(e)}function he(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var me=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ge=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,fe=/^'([^]*?)'?$/,Ce=/''/g,be=/[a-zA-Z]/;function Ee(e,n,t){h(2,arguments);var r=String(n),i=t||{},a=i.locale||I,o=a.options&&a.options.firstWeekContainsDate,s=null==o?1:b(o),d=null==i.firstWeekContainsDate?s:b(i.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=a.options&&a.options.weekStartsOn,l=null==c?0:b(c),A=null==i.weekStartsOn?l:b(i.weekStartsOn);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!a.localize)throw new RangeError("locale must contain localize property");if(!a.formatLong)throw new RangeError("locale must contain formatLong property");var u=m(e);if(!k(u))throw new RangeError("Invalid time value");var p=ce(u),g=U(u,p),f={firstWeekContainsDate:d,weekStartsOn:A,locale:a,_originalDate:u},C=r.match(ge).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,de[n])(e,a.formatLong,f):e})).join("").match(me).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return ye(t);var o=ae[r];if(o)return!i.useAdditionalWeekYearTokens&&pe(t)&&he(t,n,e),!i.useAdditionalDayOfYearTokens&&ue(t)&&he(t,n,e),o(g,t,a.localize,f);if(r.match(be))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("");return C}function ye(e){return e.match(fe)[1].replace(Ce,"'")}const ve=()=>{const e=new Date;let n=g(e);const t=f(n);let r=7*(E(n)-1)+t+1;const i=new Array(42);let a=new Date,o="";const s=(()=>{const e=document.createElement("div");e.classList.add("calendar-container");const n=document.createElement("div");n.classList.add("calendar-header");const t=document.createElement("span");t.classList.add("previous","fas","fa-chevron-left"),t.id="previous-month";const r=document.createElement("p");r.id="month";const i=document.createElement("span");i.classList.add("next","fas","fa-chevron-right"),i.id="next-month",n.appendChild(t),n.appendChild(r),n.appendChild(i),e.appendChild(n);const a=document.createElement("div");a.classList.add("calendar-grid");const o=document.createElement("div");o.classList.add("grid-header");const s=document.createElement("p");s.textContent="Sun";const d=document.createElement("p");d.textContent="Mon";const c=document.createElement("p");c.textContent="Tue";const l=document.createElement("p");l.textContent="Wed";const A=document.createElement("p");A.textContent="Thu";const h=document.createElement("p");h.textContent="Fri";const m=document.createElement("p");m.textContent="Sat",o.appendChild(s),o.appendChild(d),o.appendChild(c),o.appendChild(l),o.appendChild(A),o.appendChild(h),o.appendChild(m),a.appendChild(o);const g=document.createElement("div");g.classList.add("grid-body"),g.id="grid-body";for(let e=1;e<=42;e++){const n=document.createElement("p");n.dataset.pos=`${e}`,n.classList.add("grid-cell"),g.appendChild(n),n.addEventListener("click",k.bind(n))}return a.appendChild(g),e.appendChild(a),i.addEventListener("click",u),t.addEventListener("click",p),r.addEventListener("click",L),e})();function d(){r=7*(E(n)-1)+f(n)+1,i[r-1]=n;for(let e=r-2;e>=0;e--)i[e]=v(i[e+1],1);for(let e=r;e<i.length;e++)i[e]=y(i[e-1],1)}function c(){i.forEach((e=>{if(w(e)==w(n)){let n=7*(E(e)-1)+(f(e)+1);s.querySelector(`[data-pos="${n}"]`).textContent=`${C(e)}`}}))}function l(){for(let e=1;e<=42;e++)s.querySelector(`[data-pos="${e}"]`).textContent=""}function A(){const e=w(n),t=function(e){return h(1,arguments),m(e).getFullYear()}(n);let r="";switch(e){case 0:r=s.querySelector("#month"),r.textContent=`Jan ${t}`;break;case 1:r=s.querySelector("#month"),r.textContent=`Feb ${t}`;break;case 2:r=s.querySelector("#month"),r.textContent=`Mar ${t}`;break;case 3:r=s.querySelector("#month"),r.textContent=`Apr ${t}`;break;case 4:r=s.querySelector("#month"),r.textContent=`May ${t}`;break;case 5:r=s.querySelector("#month"),r.textContent=`Jun ${t}`;break;case 6:r=s.querySelector("#month"),r.textContent=`Jul ${t}`;break;case 7:r=s.querySelector("#month"),r.textContent=`Aug ${t}`;break;case 8:r=s.querySelector("#month"),r.textContent=`Sep ${t}`;break;case 9:r=s.querySelector("#month"),r.textContent=`Oct ${t}`;break;case 10:r=s.querySelector("#month"),r.textContent=`Nov ${t}`;break;case 11:r=s.querySelector("#month"),r.textContent=`Dic ${t}`}}function u(){n=x(n,1),d(),l(),A(),c()}function p(){n=function(e,n){h(2,arguments);var t=b(n);return x(e,-t)}(n,1),d(),l(),A(),c()}function k(){const e=this.textContent,n=s.querySelector("#month").textContent.split(" ")[0],t=s.querySelector("#month").textContent.split(" ")[1];let r=`${n} ${e}, ${t}`,i=new Date(t,["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dic"].indexOf(n),e);s.parentNode.querySelector("#date-string").textContent=r,s.remove(),B(r,i)}function B(e,n){o=e,a=n}function L(){n=g(e),d(),l(),A(),c(),B(Ee(e,"PP"),e)}return L(),d(),c(),A(),{element:s,goToToday:L,goToDate:function(){n=g(a),d(),l(),A(),c(),B(Ee(a,"PP"),a)},getDate:function(){return a},getDateString:function(){return o},setDate:B}};(()=>{const e=A(),n=(()=>{const e={Inbox:[]};return{taskList:e,newTask:(n,t,r,i,a,o,s=!1)=>{const d={title:n,description:t,dateObject:r,dateString:i,priority:a,project:o,isCompleted:s};return e[o].push(d),d},deleteTask:n=>{const t=e[n.project].indexOf(n);e[n.project].splice(t,1)}}})(),t=ve();function r(){const n=this[0],t=this[1];e.checkUncheckTask(n,t.isCompleted),t.isCompleted?t.isCompleted=!1:t.isCompleted=!0}function i(){const e=this[0],n=this[1],t=e.querySelector("#priority");t.classList.remove("task--priority__very-high","task--priority__high","task--priority__normal","task--priority__low","task--priority__very-low"),t.classList.add("task--priority__very-low"),n.priority="Very Low"}function a(){const e=this[0],n=this[1],t=e.querySelector("#priority");t.classList.remove("task--priority__very-high","task--priority__high","task--priority__normal","task--priority__low","task--priority__very-low"),t.classList.add("task--priority__low"),n.priority="Low"}function o(){const e=this[0],n=this[1],t=e.querySelector("#priority");t.classList.remove("task--priority__very-high","task--priority__high","task--priority__normal","task--priority__low","task--priority__very-low"),t.classList.add("task--priority__normal"),n.priority="Normal"}function s(){const e=this[0],n=this[1],t=e.querySelector("#priority");t.classList.remove("task--priority__very-high","task--priority__high","task--priority__normal","task--priority__low","task--priority__very-low"),t.classList.add("task--priority__high"),n.priority="High"}function d(){const e=this[0],n=this[1],t=e.querySelector("#priority");t.classList.remove("task--priority__very-high","task--priority__high","task--priority__normal","task--priority__low","task--priority__very-low"),t.classList.add("task--priority__very-high"),n.priority="Very High"}function c(){const n=this[0],r=this[1];e.openTaskEdition(n,r),t.setDate(r.dateString,r.dateObject)}function l(){const n=this[0],t=this[1];e.closeTaskEdition(n,t)}function u(){const e=this[0];this[1],e.querySelector("#task-date").contains(t.element)?e.querySelector("#task-date").removeChild(t.element):(e.querySelector("#task-date").appendChild(t.element),t.goToDate())}function p(){const e=this[0],n=this[1],r=e.querySelector("#title-edit").value,i=e.querySelector("#description-edit").value;n.title=r,n.description=i,n.dateObject=t.getDate(),n.dateString=t.getDateString(),e.querySelector("#title").textContent=r,e.querySelector("#description").textContent=i,console.log(n)}function h(){const e=this[0],n=this[1];e.querySelector("#date-string").textContent=n.dateString}function m(){const t=this[0],r=this[1];e.deleteTask(t),n.deleteTask(r)}const g=(e,n)=>{const t=[e,n];e.querySelector("#checkbox").addEventListener("click",r.bind(t)),e.querySelector("#priority-vlow").addEventListener("click",i.bind(t)),e.querySelector("#priority-low").addEventListener("click",a.bind(t)),e.querySelector("#priority-normal").addEventListener("click",o.bind(t)),e.querySelector("#priority-high").addEventListener("click",s.bind(t)),e.querySelector("#priority-vhigh").addEventListener("click",d.bind(t)),e.querySelector("#edit").addEventListener("click",c.bind(t));const A=e.querySelector("#save-changes");A.addEventListener("click",p.bind(t)),A.addEventListener("click",l.bind(t));const g=e.querySelector("#cancel-changes");g.addEventListener("click",h.bind(t)),g.addEventListener("click",l.bind(t)),e.querySelector("#delete").addEventListener("click",m.bind(t)),e.querySelector("#date-edit").addEventListener("click",u.bind(t))};e.loadSidebar(),e.loadMain(),e.loadTasks(n.taskList.Inbox);const f=document.getElementById("new-task");f.addEventListener("click",e.openCreateTaskForm.bind(t.getDateString())),f.addEventListener("click",t.goToToday),document.getElementById("close-form").addEventListener("click",e.closeCreateTaskForm);const C=document.getElementById("accept-form");C.addEventListener("click",(function(){const r=document.getElementById("task-title").value,i=document.getElementById("task-description").value,a=document.getElementById("task-project").value,o=t.getDate(),s=t.getDateString(),d=document.getElementById("task-priority").value,c=n.newTask(r,i,o,s,d,a),l=e.createTask(c);g(l,c),e.appendTask(l)})),C.addEventListener("click",e.closeCreateTaskForm);const b=document.getElementById("create-task-form").querySelector("#task-date");b.addEventListener("click",function(){const e=this;e.parentNode.contains(t.element)?e.parentNode.removeChild(t.element):(e.parentNode.appendChild(t.element),t.goToDate())}.bind(b))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,